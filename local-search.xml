<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2022年终总结</title>
    <link href="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="2022年终总结"><a href="#2022年终总结" class="headerlink" title="2022年终总结"></a>2022年终总结</h3><p>时间很快啊，一转眼又到了2022年的最后一天，明天就是2023年了，新的一年又开始了，来回顾一下过去的2022。</p><p>一年多了，驾照还没拿到手，感觉自己好笨，本来时间就不多，我还在浪费机会。一直期望的拿到驾照出去玩就可以租车了，没想到联动云都快倒闭了我还没拿到驾照😅。</p><p>今年7月份，我毕业了，走出了校门，在踏出学校的那一刻，我的青春、快乐的时光，都结束了，不过幸运的是我找到了工作，也遭受到了社会的第一顿毒打，感慨良多。虽然很不舍得学校，但是又不得不面对生活。</p><p>在毕业后就忙着找房子，找工作，还好，遇到了一个非常好的房东阿姨，同时也找到了一份能养活自己的工作，虽然工资不高，但这至少是我长这么大第一次完全靠自己在挣钱，挺开心的。</p><p>持续了三年多的疫情在今年终于有所改变，突然的政策放开，媒体宣传一百八十度大调转，我不知道这是好事还是坏事，但愿这是好事吧。</p><p>在12月份，还有一件重要的事情，那就是疫情管控放开，很不幸，在放开的第一周我就被感染了，发烧两天，烧到39.4度，走路都站不稳，还好有布洛芬救我的命，不过后遗症好像挺严重，我最近可能需要去医院检查一下心肺功能，但愿没问题，我还有好多的事情没做（<del>还想再活五百年</del>）。生病不是一个好事，愿所有人都能身体健康。</p><p>截止到2022年12月31日，我们走过了822天，在2022这一年里，我们经常吵架，也差点分手，矛盾越来越多，也越来越不可调和，我有时在想是不是合适，转念一想，哪有啥合不合适，我为什么选择她，那还不是因为喜欢，希望在新的一年里能少点矛盾，多点快乐。</p><p>现在感觉自己有一些太安逸了，每天都是上班，干活，下班，枯燥的生活让人发狂，并且微薄的工资不足以支持我的梦想，我需要做出一些改变让这一潭死水产生一些涟漪，人都是往上走的，下一步我想换一份工作，让工资能有一个较大的改观</p>]]></content>
    
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/12/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/12/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>菜鸟教程：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式</a></p><blockquote></blockquote><p>首先，设计模式主要分为三类，还有一个J2EE模式不常用：</p><h5 id="创建型模式（5种）"><a href="#创建型模式（5种）" class="headerlink" title="创建型模式（5种）"></a>创建型模式（5种）</h5><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><p>工厂模式（Factory Pattern）</p><p>抽象工厂模式（Abstract Factory Pattern）</p><p>单例模式（Singleton Pattern） </p><p>建造者模式（Builder Pattern）</p><p>原型模式（Prototype Pattern）</p><h5 id="结构型模式（8种）"><a href="#结构型模式（8种）" class="headerlink" title="结构型模式（8种）"></a>结构型模式（8种）</h5><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><p>适配器模式（Adapter Pattern）</p><p>桥接模式（Bridge Pattern）</p><p>过滤器模式（Filter、Criteria Pattern）</p><p>组合模式（Composite Pattern）</p><p>装饰器模式（Decorator Pattern）</p><p>外观模式（Facade Pattern）</p><p>享元模式（Flyweight Pattern）</p><p>代理模式（Proxy Pattern）</p><h5 id="行为型模式（12种）"><a href="#行为型模式（12种）" class="headerlink" title="行为型模式（12种）"></a>行为型模式（12种）</h5><p>这些设计模式特别关注对象之间的通信。</p><p>责任链模式（Chain of Responsibility Pattern）</p><p>命令模式（Command Pattern）</p><p>解释器模式（Interpreter Pattern）</p><p>迭代器模式（Iterator Pattern）</p><p>中介者模式（Mediator Pattern）</p><p>备忘录模式（Memento Pattern）</p><p>观察者模式（Observer Pattern）</p><p>状态模式（State Pattern）</p><p>空对象模式（Null Object Pattern）</p><p>策略模式（Strategy Pattern）</p><p>模板模式（Template Pattern）</p><p>访问者模式（Visitor Pattern）</p><h4 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h4><h6 id="1、开闭原则（Open-Close-Principle）"><a href="#1、开闭原则（Open-Close-Principle）" class="headerlink" title="1、开闭原则（Open Close Principle）"></a>1、开闭原则（Open Close Principle）</h6><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h6 id="2、里氏代换原则（Liskov-Substitution-Principle）"><a href="#2、里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2、里氏代换原则（Liskov Substitution Principle）"></a>2、里氏代换原则（Liskov Substitution Principle）</h6><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h6 id="3、依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3、依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3、依赖倒转原则（Dependence Inversion Principle）"></a>3、依赖倒转原则（Dependence Inversion Principle）</h6><p>这个原则是开闭原则的基础，具体内容：<strong>针对接口编程，依赖于抽象而不依赖于具体</strong>。</p><h6 id="4、接口隔离原则（Interface-Segregation-Principle）"><a href="#4、接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4、接口隔离原则（Interface Segregation Principle）"></a>4、接口隔离原则（Interface Segregation Principle）</h6><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调<strong>降低依赖，降低耦合</strong>。</p><h6 id="5、迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#5、迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="5、迪米特法则，又称最少知道原则（Demeter Principle）"></a>5、迪米特法则，又称最少知道原则（Demeter Principle）</h6><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h6 id="6、合成复用原则（Composite-Reuse-Principle）"><a href="#6、合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6、合成复用原则（Composite Reuse Principle）"></a>6、合成复用原则（Composite Reuse Principle）</h6><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><p><strong>先看一遍菜鸟教程</strong></p><hr><h4 id="1、工厂模式"><a href="#1、工厂模式" class="headerlink" title="1、工厂模式"></a>1、工厂模式</h4>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建hexo博客</title>
    <link href="/2022/12/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/12/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="1、新建仓库"><a href="#1、新建仓库" class="headerlink" title="1、新建仓库"></a>1、新建仓库</h3><p>首先在 github 新建一个仓库用来存放我们的博客文件，由于要使用 Github Page 功能，所以仓库名称要写成<code>用户名.github.io</code>的形式。</p><h3 id="2、配置环境"><a href="#2、配置环境" class="headerlink" title="2、配置环境"></a>2、配置环境</h3><p>工欲善其事必先利其器，首先要安装nodejs，hexo依赖于这个运行，其次是git，用于管理版本和向远程仓库推送代码，怎么安装自己百度。安装完成要进行测试，在命令行输入<code>node --version</code>和<code>git --version</code>如果有版本信息就行了。</p><h3 id="3、下载脚本"><a href="#3、下载脚本" class="headerlink" title="3、下载脚本"></a>3、下载脚本</h3><p>可以使用脚本来快速部署博客，脚本自己在github找。</p><h3 id="4、生成ssh秘钥"><a href="#4、生成ssh秘钥" class="headerlink" title="4、生成ssh秘钥"></a>4、生成ssh秘钥</h3><p>由于我们最终需要把博客部署到github上面，那我们平时更新博客就要手动提交推送，甚至有时候还要登陆账号，很麻烦，这时候就需要一个快速提交代码的办法，生成ssh，ssh是一个凭证，储存在C盘用户目录下，每次提交的时候github就知道这台电脑是可信任的，不用登陆就可以提交代码。</p><h3 id="5、部署"><a href="#5、部署" class="headerlink" title="5、部署"></a>5、部署</h3><p>到这里博客应该可以在本地预览了，但是现在只能你自己看，想让别人看到就要把博客部署到github，配置博客目录下的_config.yml文件，拉到最下面，填写仓库地址和分支名称，注意，这里分支名称不能是master，要写main，不然hexo会自动在远程仓库新建一个分支，这样是不行滴。最后运行<code>./up.sh</code>生成静态博客内容并推送到远程仓库。</p><h3 id="6、搞定"><a href="#6、搞定" class="headerlink" title="6、搞定"></a>6、搞定</h3><p>推送完成后去github查看是否成功，稍等几分钟等github解析，然后在地址栏输入<code>用户名.github.io</code>就可以查看博客。</p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>其实，去看hexo官网更好，文档清晰，简单快捷。<br>官网：<a href="https://hexo.io/zh-cn/">Hexo</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用hexo写文章</title>
    <link href="/2022/01/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <url>/2022/01/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%86%99%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="如何使用hexo写文章"><a href="#如何使用hexo写文章" class="headerlink" title="如何使用hexo写文章"></a>如何使用hexo写文章</h1><h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>我们已经使用hexo搭建好了平台，需要我们去一点一点让它丰富起来</p><h2 id="1、创建文章"><a href="#1、创建文章" class="headerlink" title="1、创建文章"></a>1、创建文章</h2><p>首先我们需要先创建一个md文件，使用下面命令来生成一个md文件</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;标题&quot;</span><br></code></pre></td></tr></table></figure><p>这个就是我们的文章模板，我们就在这里写文章，这也是我们的文章存档</p><h2 id="2、清理缓存"><a href="#2、清理缓存" class="headerlink" title="2、清理缓存"></a>2、清理缓存</h2><p>在每一次编译部署之前最好都clean一下<br>我们可以使用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><p>来清理静态缓存文件，保证文件都是最新更改的</p><h2 id="3、生成静态文件"><a href="#3、生成静态文件" class="headerlink" title="3、生成静态文件"></a>3、生成静态文件</h2><p>使用下面命令来生成静态文件，g -&gt; generate</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><p>我们在上面md文件里写的文章是不能被浏览器解析的，所以需要转换成html页面</p><h2 id="4、提交部署"><a href="#4、提交部署" class="headerlink" title="4、提交部署"></a>4、提交部署</h2><p>文章编译好了之后就需要提交到github上去，d -&gt; deploy</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>静静等待提交成功，如果提交失败，可能是账号填写错误，仔细检查一下，或者是因为网络不好，因为github经常会被墙不太稳定，多试试</p><h2 id="5、完结撒花！！"><a href="#5、完结撒花！！" class="headerlink" title="5、完结撒花！！"></a>5、完结撒花！！</h2><p>稍等一下就可以访问到更改了</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取免费域名</title>
    <link href="/2022/01/08/%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/"/>
    <url>/2022/01/08/%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="如何获取免费域名"><a href="#如何获取免费域名" class="headerlink" title="如何获取免费域名"></a>如何获取免费域名</h1><p>网站：<a href="https://www.freenom.com/">https://www.freenom.com</a></p><blockquote><p>网站比较辣鸡，有时候会访问不了，有时候又会无响应或者频繁让你登录</p></blockquote><h2 id="1、注册一个账号"><a href="#1、注册一个账号" class="headerlink" title="1、注册一个账号"></a>1、注册一个账号</h2><p>首先要有一个账号，推荐使用gmail，别的邮箱应该也可以，没试过</p><h2 id="2、登录到freenom"><a href="#2、登录到freenom" class="headerlink" title="2、登录到freenom"></a>2、登录到freenom</h2><p>登录需要挂梯子，节点最好选择美国的</p><h2 id="3、查找域名"><a href="#3、查找域名" class="headerlink" title="3、查找域名"></a>3、查找域名</h2><p>然后在右上角菜单选择<code>注册一个新域名</code>，输入想要的域名，点击查找，会看到域名是否可用，如果可用，就添加到购物车里并选择注册时间到12个月，点击下一步，到提交订单这里停下来，然后是最重要的一步</p><h2 id="4、更改资料"><a href="#4、更改资料" class="headerlink" title="4、更改资料"></a>4、更改资料</h2><p>这是最重要的的一步，关乎到能否注册成功，因为freenom是免费的域名注册商，为了防止恶意注册，它会有一个机器来判定你的ip和地址，如果我们使用自己的真实地址和资料，大概率会失败，所以，我们需要去将地址更改为自己节点的地址，资料可以百度身份生成，然后填写好，提交，这个时候就可以回到购物车了，现在点击下单，稍等就注册成功了，改资料这个步骤不能跳过，后面续费，注册别的域名也可以尝试改资料。</p><h2 id="5、注册成功"><a href="#5、注册成功" class="headerlink" title="5、注册成功"></a>5、注册成功</h2><p>注册成功之后就可以把解析服务器改到阿里云或者腾讯云，但是我们注册的<code>.ml .tk .gq .ga</code>这些域名都是阿里云不识别的，所以要放到别的域名服务商</p><h2 id="6、更改解析服务器"><a href="#6、更改解析服务器" class="headerlink" title="6、更改解析服务器"></a>6、更改解析服务器</h2><p>把域名解析到cloudflare就可以后续的操作，我们在<code>freenom</code>-<code>Services</code>-<code>My Domains</code>找到自己的域名，点击后面的<code>Manage Domain</code>，找到<code>nameservers</code>，设置为<code>enter below</code>，填入cloudflare的解析服务器</p><h2 id="7、在cloudflare添加域名"><a href="#7、在cloudflare添加域名" class="headerlink" title="7、在cloudflare添加域名"></a>7、在cloudflare添加域名</h2><p>我们在cloudflare添加自己的域名，就可以让服务商来帮我管理相关域名、防止黑客攻击等，然后在添加解析规则，添加两个CNAME，名称为域名，内容为想要指向的网址，例如：<code>CNAME : songizhu.tk : jeromest.github.io</code>，再添加一条<code>www，CNAME : www : jeromest.github.io</code></p><h2 id="8、告一段落"><a href="#8、告一段落" class="headerlink" title="8、告一段落"></a>8、告一段落</h2><p>到这里就完成了域名注册和解析的过程，下面来配置github</p><h2 id="9、配置github"><a href="#9、配置github" class="headerlink" title="9、配置github"></a>9、配置github</h2><p>使用githubpage来生成一个静态网站，略过过程，挖个坑以后再填，将<code>songizhu.tk</code>这个域名映射到<code>jeromest.github.io</code>就可以使用我们自己的域名来访问了</p><h2 id="10、完结撒花！！"><a href="#10、完结撒花！！" class="headerlink" title="10、完结撒花！！"></a>10、完结撒花！！</h2>]]></content>
    
    
    
    <tags>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2021/10/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/10/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="你好，这是我的第一篇博客！"><a href="#你好，这是我的第一篇博客！" class="headerlink" title="你好，这是我的第一篇博客！"></a>你好，这是我的第一篇博客！</h1><p>这篇博客是使用Hexo搭建在Github Page上的，使用Markdown编写。以后我将在此记录和分享我学习过程中的一些东西！</p>]]></content>
    
    
    
    <tags>
      
      <tag>FristBlog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/24/hello-world/"/>
    <url>/2021/10/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
